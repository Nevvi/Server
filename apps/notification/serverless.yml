service: notification

frameworkVersion: '2'
variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager

custom:
  prune:
    automatic: true
    number: 2
  serverless-iam-roles-per-function:
    defaultInherit: true
  domainNameMap:
    default: api.development.nevvi.net
    production: api.nevvi.net
  oauthDomainMap:
    default: https://nevvi-development-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
    production: https://nevvi-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
  basePathMap:
    production: notification
    development: notification
    default: ${self:provider.stage}-notification
  customDomain:
    domainName: ${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}
    basePath: ${self:custom.basePathMap.${self:provider.stage}, self:custom.basePathMap.default}
  apiUserPoolNameMap:
    default: nevvi-development-api-users
    production: nevvi-api-users
  notificationTableNameMap:
    default: notification-dev
    production: notification
  notificationTableName: ${self:custom.notificationTableNameMap.${self:provider.stage}, self:custom.notificationTableNameMap.default}
  notificationTableArn: ${ssm:/nevvi/dynamodb/${self:custom.notificationTableName}/arn}
  apiUserPoolName: ${self:custom.apiUserPoolNameMap.${self:provider.stage}, self:custom.apiUserPoolNameMap.default}
  apiUserPoolClientId: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/clients/notification/id}
  apiUserPoolClientSecret: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/clients/notification/secret}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: notification-${self:provider.stage}
  stackName: notification-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    NOTIFICATION_TABLE: ${self:custom.notificationTableName}
    OAUTH_DOMAIN_URL: ${self:custom.oauthDomainMap.${self:provider.stage}, self:custom.oauthDomainMap.default}
    USER_API_URL: https://${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}/authentication
    API_CLIENT_ID: ${self:custom.apiUserPoolClientId}
    API_CLIENT_SECRET: ${self:custom.apiUserPoolClientSecret}
    USER_API_SCOPES: user_api/user_api.all

functions:
  authorizer:
    handler: src/functions/Authorizer.authorize

  createGroup:
    handler: src/functions/NotificationHandler.createGroup
    events:
      - http:
          path: /v1/users/{userId}/groups
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.notificationTableArn}
      - Effect: Allow
        Action:
          - sns:CreateTopic
        Resource: "*"

  getGroups:
    handler: src/functions/NotificationHandler.getGroups
    events:
      - http:
          path: /v1/users/{userId}/groups
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.notificationTableArn}

  getGroup:
    handler: src/functions/NotificationHandler.getGroup
    events:
      - http:
          path: /v1/users/{userId}/groups/{groupId}
          method: get
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${self:custom.notificationTableArn}

  handleResponse:
    handler: src/functions/NotificationHandler.handleUserResponse
    events:
      - sns:
          arn: arn:aws:sns:us-east-1:275527036335:user-responses
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:DeleteItem
          - dynamodb:Query
        Resource: ${self:custom.notificationTableArn}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.notificationTableArn}/index/GSI1
      - Effect: Allow
        Action:
          - sns:*
        Resource: "*"
