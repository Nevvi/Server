service: notification

frameworkVersion: '3'
variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager
  - serverless-plugin-split-stacks

params:
  default:
    basePath: ${self:provider.stage}-notification
    domainName: api.development.nevvi.net
    firebaseCredentials: ${ssm:/nevvi/firebase/credentials}
    mongoUri: ${ssm:/nevvi/mongo/nevvi-development/uri}
    notificationQueueArn: ${ssm:/nevvi/sqs/notifications-dev/arn}
  development:
    basePath: notification
  production:
    basePath: notification
    mongoUri: ${ssm:/nevvi/mongo/nevvi/uri}
    notificationQueueArn: ${ssm:/nevvi/sqs/notifications/arn}
    domainName: api.nevvi.net

custom:
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false
  prune:
    automatic: true
    number: 2
  customDomain:
    domainName: ${param:domainName}
    basePath: ${param:basePath}
  mongoUri: ${param:mongoUri}

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: notification-${self:provider.stage}
  stackName: notification-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    FIREBASE_CREDENTIALS: ${param:firebaseCredentials}
    MONGO_URI: ${param:mongoUri}

functions:
  notificationAuthorizer:
    handler: src/functions/NotificationAuthorizer.authorize

  updateDeviceToken:
    handler: src/functions/NotificationHandler.updateDeviceToken
    events:
      - http:
          path: /v1/users/{userId}/notifications/token
          method: post
          authorizer:
            name: notificationAuthorizer
            resultTtlInSeconds: 0
            type: request

  sendNotification:
    handler: src/functions/NotificationHandler.sendNotification
    events:
      - sqs:
          arn: ${param:notificationQueueArn}

