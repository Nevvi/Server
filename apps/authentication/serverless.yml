service: authentication

frameworkVersion: '2'
variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager

custom:
  prune:
    automatic: true
    number: 2
  oauthDomainMap:
    default: https://nevvi-development-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
    production: https://nevvi-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
  apiUserPoolNameMap:
    default: nevvi-development-api-users
    production: nevvi-api-users
  publicUserPoolNameMap:
    default: nevvi-development-public-users
    production: nevvi-public-users
  publicUserPoolName: ${self:custom.publicUserPoolNameMap.${self:provider.stage}, self:custom.publicUserPoolNameMap.default}
  publicUserPoolArn: ${ssm:/nevvi/cognito/${self:custom.publicUserPoolName}/arn}
  publicUserPoolId: ${ssm:/nevvi/cognito/${self:custom.publicUserPoolName}/id}
  publicUserPoolClientId: ${ssm:/nevvi/cognito/${self:custom.publicUserPoolName}/clients/authentication/id}
  apiUserPoolName: ${self:custom.apiUserPoolNameMap.${self:provider.stage}, self:custom.apiUserPoolNameMap.default}
  apiUserPoolClientId: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/clients/authentication/id}
  apiUserPoolClientSecret: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/clients/authentication/secret}
  domainNameMap:
    default: api.development.nevvi.net
    production: api.nevvi.net
  basePathMap:
    production: authentication
    development: authentication
    default: ${self:provider.stage}-authentication
  customDomain:
    domainName: ${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}
    basePath: ${self:custom.basePathMap.${self:provider.stage}, self:custom.basePathMap.default}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: authentication-${self:provider.stage}
  stackName: authentication-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    OAUTH_DOMAIN_URL: ${self:custom.oauthDomainMap.${self:provider.stage}, self:custom.oauthDomainMap.default}
    PUBLIC_USER_POOL_CLIENT_ID: ${self:custom.publicUserPoolClientId}
    PUBLIC_USER_POOL_ID: ${self:custom.publicUserPoolId}
    USER_API_URL: https://${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}/user
    API_CLIENT_ID: ${self:custom.apiUserPoolClientId}
    API_CLIENT_SECRET: ${self:custom.apiUserPoolClientSecret}
    USER_API_SCOPES: user_api/user_api.all

functions:
  userAuthorizer:
    handler: src/functions/UserAuthorizer.authorize

  register:
    handler: src/functions/AuthHandler.register
    events:
      - http:
          path: /v1/register
          method: post

  confirm:
    handler: src/functions/AuthHandler.confirm
    events:
      - http:
          path: /v1/confirm
          method: post

  login:
    handler: src/functions/AuthHandler.login
    events:
      - http:
          path: /v1/login
          method: post

  logout:
    handler: src/functions/AuthHandler.logout
    events:
      - http:
          path: /v1/logout
          method: post

  getUser:
    handler: src/functions/UserHandler.getUser
    events:
      - http:
          path: /v1/users/{userId}
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:GetUser
        Resource: ${self:custom.publicUserPoolArn}

  updateUser:
    handler: src/functions/UserHandler.updateUser
    events:
      - http:
          path: /v1/users/{userId}
          method: patch
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:GetUser
          - cognito-idp:UpdateUserAttributes
        Resource: ${self:custom.publicUserPoolArn}