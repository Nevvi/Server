org: nevvi
app: nevvi
service: authentication

frameworkVersion: '4'

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-domain-manager
  - serverless-plugin-split-stacks

package:
  patterns:
    - '!./**'           # exclude everything first
    - './src/**'        # include your source directory

custom:
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false
  prune:
    automatic: true
    number: 2
  customDomain:
    domainName: ${param:domainName}
    basePath: ${param:basePath}
  pythonRequirements:
    dockerizePip: true
  publicUserPoolName: ${param:publicUserPoolName}
  publicUserPoolArn: ${ssm:/nevvi/cognito/${self:custom.publicUserPoolName}/arn}
  publicUserPoolId: ${ssm:/nevvi/cognito/${self:custom.publicUserPoolName}/id}
  publicUserPoolClientId: ${ssm:/nevvi/cognito/${self:custom.publicUserPoolName}/clients/authentication/id}

params:
  default:
    userApiKey: ${ssm:/nevvi/lambda/development/user-api-key}
    authenticationApiKey: ${ssm:/nevvi/lambda/development/authentication-api-key}
    basePath: ${self:provider.stage}-authentication
    domainName: api.development.nevvi.net
    publicUserPoolName: nevvi-development-public-users
  development:
    basePath: authentication
  production:
    userApiKey: ${ssm:/nevvi/lambda/production/user-api-key}
    authenticationApiKey: ${ssm:/nevvi/lambda/production/authentication-api-key}
    basePath: authentication
    domainName: api.nevvi.net
    publicUserPoolName: nevvi-public-users

provider:
  name: aws
  runtime: python3.12
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: authentication-${self:provider.stage}
  stackName: authentication-${self:provider.stage}
  apiGateway:
    apiKeys:
      - name: authentication-internal-api-key-${self:provider.stage}
        value: ${param:authenticationApiKey}
        description: API key for internal endpoints
    usagePlan:
      quota:
        limit: 10000
        period: MONTH
      throttle:
        rateLimit: 100
        burstLimit: 200
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    PUBLIC_USER_POOL_CLIENT_ID: ${self:custom.publicUserPoolClientId}
    PUBLIC_USER_POOL_ID: ${self:custom.publicUserPoolId}
    MIN_IOS_VERSION: 1.11
    USER_API_URL: https://${param:domainName}/user
    USER_API_KEY: ${param:userApiKey}

functions:
  authorizer:
    handler: src/functions/authorizer.authorize

  minAppVersions:
    handler: src/functions/auth_handler.get_min_app_versions
    events:
      - http:
          path: /v1/versions
          method: get

  register:
    handler: src/functions/auth_handler.register
    events:
      - http:
          path: /v1/register
          method: post

  confirm:
    handler: src/functions/auth_handler.confirm
    events:
      - http:
          path: /v1/confirm
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
        Resource: ${self:custom.publicUserPoolArn}

  login:
    handler: src/functions/auth_handler.login
    events:
      - http:
          path: /v1/login
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
        Resource: ${self:custom.publicUserPoolArn}

  refreshLogin:
    handler: src/functions/auth_handler.refresh_login
    events:
      - http:
          path: /v1/refreshLogin
          method: post

  logout:
    handler: src/functions/auth_handler.logout
    events:
      - http:
          path: /v1/logout
          method: post

  resendSignupCode:
    handler: src/functions/auth_handler.resend_signup_code
    events:
      - http:
          path: /v1/resendSignupCode
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
          - cognito-idp:ResendConfirmationCode
        Resource: ${self:custom.publicUserPoolArn}

  forgotPassword:
    handler: src/functions/auth_handler.forgot_password
    events:
      - http:
          path: /v1/forgotPassword
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
          - cognito-idp:ForgotPassword
        Resource: ${self:custom.publicUserPoolArn}

  confirmForgotPassword:
    handler: src/functions/auth_handler.confirm_forgot_password
    events:
      - http:
          path: /v1/confirmForgotPassword
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminGetUser
          - cognito-idp:ConfirmForgotPassword
        Resource: ${self:custom.publicUserPoolArn}

  sendVerificationCode:
    handler: src/functions/auth_handler.send_code
    events:
      - http:
          path: /v1/users/{userId}/sendCode
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:GetUserAttributeVerificationCode
        Resource: ${self:custom.publicUserPoolArn}

  confirmVerificationCode:
    handler: src/functions/auth_handler.confirm_code
    events:
      - http:
          path: /v1/users/{userId}/confirmCode
          method: post
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:VerifyUserAttribute
          - cognito-idp:GetUser
        Resource: ${self:custom.publicUserPoolArn}

  updateUser:
    handler: src/functions/auth_handler.update_user
    events:
      - http:
          path: /api/v1/users/{userId}
          method: patch
          private: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminGetUser
          - cognito-idp:ListUsers
          - cognito-idp:AdminUpdateUserAttributes
        Resource: ${self:custom.publicUserPoolArn}