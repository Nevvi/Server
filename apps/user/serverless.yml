service: user

frameworkVersion: '2'
variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager

custom:
  prune:
    automatic: true
    number: 2
  domainNameMap:
    default: api.development.nevvi.net
    production: api.nevvi.net
  basePathMap:
    production: user
    development: user
    default: ${self:provider.stage}-user
  customDomain:
    domainName: ${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}
    basePath: ${self:custom.basePathMap.${self:provider.stage}, self:custom.basePathMap.default}
  apiUserPoolNameMap:
    default: nevvi-development-api-users
    production: nevvi-api-users
  publicUserPoolNameMap:
    default: nevvi-development-public-users
    production: nevvi-public-users
  apiUserPoolName: ${self:custom.apiUserPoolNameMap.${self:provider.stage}, self:custom.apiUserPoolNameMap.default}
  apiUserPoolArn: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/arn}


provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: user-${self:provider.stage}
  stackName: user-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    OAUTH_DOMAIN_URL: ${self:custom.oauthDomainMap.${self:provider.stage}, self:custom.oauthDomainMap.default}

functions:
  userAuthorizer:
    handler: src/functions/UserAuthorizer.authorize

  createUser:
    handler: src/functions/UserHandler.create
    events:
      - http:
          path: /v1/users
          method: post
          authorizer:
            arn: ${self:custom.apiUserPoolArn}
            scopes:
              - user_api/user_api.all