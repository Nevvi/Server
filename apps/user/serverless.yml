service: user

frameworkVersion: '3'
variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager
  - serverless-plugin-split-stacks


params:
  default:
    apiUserPoolClient: ${ssm:/nevvi/cognito/nevvi-development-api-users/clients/user/id}
    apiUserPoolClientSecret: ${ssm:/nevvi/cognito/nevvi-development-api-users/clients/user/secret}
    apiUserPoolName: nevvi-development-api-users
    basePath: ${self:provider.stage}-user
    defaultProfileImage: https://nevvi-user-images-dev.s3.amazonaws.com/Default_Profile_Picture.png
    domainName: api.development.nevvi.net
    mongoUri: ${ssm:/nevvi/mongo/nevvi-development/uri}
    notificationQueueArn: ${ssm:/nevvi/sqs/notifications-dev/arn}
    notificationQueueUrl: ${ssm:/nevvi/sqs/notifications-dev/url}
    oauthDomain: https://nevvi-development-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
    userImagesBucketName: nevvi-user-images-dev
  development:
    basePath: user
  production:
    apiUserPoolClient: ${ssm:/nevvi/cognito/nevvi-api-users/clients/user/id}
    apiUserPoolClientSecret: ${ssm:/nevvi/cognito/nevvi-api-users/clients/user/secret}
    apiUserPoolName: nevvi-api-users
    basePath: user
    defaultProfileImage: https://nevvi-user-images.s3.amazonaws.com/Default_Profile_Picture.png
    mongoUri: ${ssm:/nevvi/mongo/nevvi/uri}
    notificationQueueArn: ${ssm:/nevvi/sqs/notifications/arn}
    notificationQueueUrl: ${ssm:/nevvi/sqs/notifications/url}
    domainName: api.nevvi.net
    oauthDomain: https://nevvi-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
    userImagesBucketName: nevvi-user-images

custom:
  splitStacks:
    perFunction: false
    perType: true
    perGroupFunction: false
  prune:
    automatic: true
    number: 2
  customDomain:
    domainName: ${param:domainName}
    basePath: ${param:basePath}
  apiUserPoolName: ${param:apiUserPoolName}
  apiUserPoolArn: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/arn}
  userImagesBucketName: ${param:userImagesBucketName}
  userImagesBucketArn: ${ssm:/nevvi/s3/${self:custom.userImagesBucketName}/arn}
  mongoUri: ${param:mongoUri}
  notificationQueueArn: ${param:notificationQueueArn}

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: user-${self:provider.stage}
  stackName: user-${self:provider.stage}
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      - 'image/png'
      - 'image/jpeg'
      - 'application/octet-stream'
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    MONGO_URI: ${param:mongoUri}
    OAUTH_DOMAIN_URL: ${param:oauthDomain}
    AUTHENTICATION_API_URL: https://${param:domainName}/authentication
    API_CLIENT_ID: ${param:apiUserPoolClient}
    API_CLIENT_SECRET: ${param:apiUserPoolClientSecret}
    DEFAULT_PROFILE_IMAGE: ${param:defaultProfileImage}
    IMAGE_BUCKET: ${self:custom.userImagesBucketName}
    USER_API_SCOPES: user_api/user_api.all
    EMAIL_FROM_ARN: arn:aws:ses:us-east-1:275527036335:identity/nevvi.net
    NOTIFICATION_QUEUE_URL: ${param:notificationQueueUrl}

functions:
  userAuthorizer:
    handler: src/functions/UserAuthorizer.authorize

  getUser:
    handler: src/functions/UserHandler.getUser
    events:
      - http:
          path: /v1/users/{userId}
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  createUser:
    handler: src/functions/UserHandler.createUser
    events:
      - http:
          path: /api/v1/users
          method: post
          authorizer:
            arn: ${self:custom.apiUserPoolArn}
            scopes:
              - user_api/user_api.all

  updateUserContact:
    handler: src/functions/UserHandler.updateUserContact
    events:
      - http:
          path: /api/v1/users/{userId}/contact
          method: post
          authorizer:
            arn: ${self:custom.apiUserPoolArn}
            scopes:
              - user_api/user_api.all
  updateUser:
    handler: src/functions/UserHandler.updateUser
    events:
      - http:
          path: /v1/users/{userId}
          method: patch
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
  updateUserImage:
    handler: src/functions/UserHandler.updateUserImage
    events:
      - http:
          path: /v1/users/{userId}/image
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
        Resource:
          - ${self:custom.userImagesBucketArn}
          - ${self:custom.userImagesBucketArn}/*
  searchUsers:
    handler: src/functions/UserHandler.searchUsers
    events:
      - http:
          path: /v1/users/search
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
  notifyUsers:
    handler: src/functions/UserHandler.notifyOutOfSyncUsers
    events:
      - schedule:
          rate: cron(0 17 * * ? *) # noon est every day (17 UTC - 5 hours)
          enabled: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:custom.notificationQueueArn}

  # Connection Requests
  createConnectionRequest:
    handler: src/functions/ConnectionHandler.requestConnection
    events:
      - http:
          path: /v1/users/{userId}/connections/requests
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:custom.notificationQueueArn}

  confirmConnectionRequest:
    handler: src/functions/ConnectionHandler.confirmConnection
    events:
      - http:
          path: /v1/users/{userId}/connections/requests/confirm
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - sqs:SendMessage
        Resource: ${self:custom.notificationQueueArn}

  denyConnectionRequest:
    handler: src/functions/ConnectionHandler.denyConnection
    events:
      - http:
          path: /v1/users/{userId}/connections/requests/deny
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  getPendingRequests:
    handler: src/functions/ConnectionHandler.getOpenRequests
    events:
      - http:
          path: /v1/users/{userId}/connections/requests/pending
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  getRejectedRequests:
    handler: src/functions/ConnectionHandler.getRejectedUsers
    events:
      - http:
          path: /v1/users/{userId}/connections/rejected
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  getConnections:
    handler: src/functions/ConnectionHandler.getConnections
    events:
      - http:
          path: /v1/users/{userId}/connections
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  getConnection:
    handler: src/functions/ConnectionHandler.getConnection
    events:
      - http:
          path: /v1/users/{userId}/connections/{connectedUserId}
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  updateConnection:
    handler: src/functions/ConnectionHandler.updateConnection
    events:
      - http:
          path: /v1/users/{userId}/connections/{connectedUserId}
          method: patch
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  blockConnection:
    handler: src/functions/ConnectionHandler.blockConnection
    events:
      - http:
          path: /v1/users/{userId}/connections/{connectedUserId}
          method: delete
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  # Connection Groups
  createConnectionGroup:
    handler: src/functions/ConnectionGroupHandler.createGroup
    events:
      - http:
          path: /v1/users/{userId}/connection-groups
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  getConnectionGroups:
    handler: src/functions/ConnectionGroupHandler.getGroups
    events:
      - http:
          path: /v1/users/{userId}/connection-groups
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  deleteConnectionGroup:
    handler: src/functions/ConnectionGroupHandler.deleteGroup
    events:
      - http:
          path: /v1/users/{userId}/connection-groups/{groupId}
          method: delete
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  exportConnectionGroup:
    handler: src/functions/ConnectionGroupHandler.exportGroup
    events:
      - http:
          path: /v1/users/{userId}/connection-groups/{groupId}/export
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:SendRawEmail
        Resource: arn:aws:ses:us-east-1:275527036335:identity/nevvi.net

  getConnectionsInGroup:
    handler: src/functions/ConnectionGroupHandler.getConnections
    events:
      - http:
          path: /v1/users/{userId}/connection-groups/{groupId}/connections
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  addToConnectionGroup:
    handler: src/functions/ConnectionGroupHandler.addConnection
    events:
      - http:
          path: /v1/users/{userId}/connection-groups/{groupId}/connections
          method: post
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request

  removeFromConnectionGroup:
    handler: src/functions/ConnectionGroupHandler.removeConnection
    events:
      - http:
          path: /v1/users/{userId}/connection-groups/{groupId}/connections
          method: delete
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
