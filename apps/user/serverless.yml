service: user

frameworkVersion: '3'
variablesResolutionMode: 20210326

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager


params:
  default:
    apiUserPoolClient: ${ssm:/nevvi/cognito/nevvi-development-api-users/clients/user/id}
    apiUserPoolClientSecret: ${ssm:/nevvi/cognito/nevvi-development-api-users/clients/user/secret}
    apiUserPoolName: nevvi-development-api-users
    basePath: ${self:provider.stage}-user
    domainName: api.development.nevvi.net
    oauthDomain: https://nevvi-development-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
    userTableName: user-dev
  development:
    basePath: user
  production:
    apiUserPoolClient: ${ssm:/nevvi/cognito/nevvi-api-users/clients/user/id}
    apiUserPoolClientSecret: ${ssm:/nevvi/cognito/nevvi-api-users/clients/user/secret}
    apiUserPoolName: nevvi-api-users
    basePath: user
    domainName: api.nevvi.net
    oauthDomain: https://nevvi-api-users.auth.us-east-1.amazoncognito.com/oauth2/token
    userTableName: user

custom:
  prune:
    automatic: true
    number: 2
  customDomain:
    domainName: ${param:domainName}
    basePath: ${param:basePath}
  apiUserPoolName: ${param:apiUserPoolName}
  apiUserPoolArn: ${ssm:/nevvi/cognito/${self:custom.apiUserPoolName}/arn}
  userTableName: ${param:userTableName}
  userTableArn: ${ssm:/nevvi/dynamodb/${self:custom.userTableName}/arn}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: user-${self:provider.stage}
  stackName: user-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    USER_TABLE: ${self:custom.userTableName}
    OAUTH_DOMAIN_URL: ${param:oauthDomain}
    AUTHENTICATION_API_URL: https://${param:domainName}/authentication
    API_CLIENT_ID: ${param:apiUserPoolClient}
    API_CLIENT_SECRET: ${param:apiUserPoolClientSecret}
    USER_API_SCOPES: user_api/user_api.all

functions:
  userAuthorizer:
    handler: src/functions/UserAuthorizer.authorize

  getUser:
    handler: src/functions/UserHandler.getUser
    events:
      - http:
          path: /v1/users/{userId}
          method: get
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: ${self:custom.userTableArn}
  createUser:
    handler: src/functions/UserHandler.createUser
    events:
      - http:
          path: /api/v1/users
          method: post
          authorizer:
            arn: ${self:custom.apiUserPoolArn}
            scopes:
              - user_api/user_api.all
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.userTableArn}
  updateUserContact:
    handler: src/functions/UserHandler.updateUserContact
    events:
      - http:
          path: /api/v1/users/{userId}/contact
          method: post
          authorizer:
            arn: ${self:custom.apiUserPoolArn}
            scopes:
              - user_api/user_api.all
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: ${self:custom.userTableArn}
  updateUser:
    handler: src/functions/UserHandler.updateUser
    events:
      - http:
          path: /v1/users/{userId}
          method: patch
          authorizer:
            name: userAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: ${self:custom.userTableArn}