service:
  name: fantasy-football

plugins:
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-domain-manager

custom:
  prune:
    automatic: true
    number: 2
  serverless-iam-roles-per-function:
    defaultInherit: true
  playerTableNameMap:
    default: fantasy-players-dev
    production: fantasy-players
  playerTableName: ${self:custom.playerTableNameMap.${self:provider.stage}, self:custom.playerTableNameMap.default}
  playerTableArn: ${ssm:/nevvi/dynamodb/${self:custom.playerTableName}/arn}
  playerActionQueueNameMap:
    default: player-actions-dev
    production: player-actions
  playerActionQueueName: ${self:custom.playerActionQueueNameMap.${self:provider.stage}, self:custom.playerActionQueueNameMap.default}
  playerActionQueueArn: ${ssm:/nevvi/sqs/${self:custom.playerActionQueueName}/arn}
  playerActionQueueUrl: ${ssm:/nevvi/sqs/${self:custom.playerActionQueueName}/url}
  domainNameMap:
    default: api.development.nevvi.net
    production: api.nevvi.net
  basePathMap:
    production: fantasy-football
    development: fantasy-football
    default: ${self:provider.stage}-fantasy-football
  customDomain:
    domainName: ${self:custom.domainNameMap.${self:provider.stage}, self:custom.domainNameMap.default}
    basePath: ${self:custom.basePathMap.${self:provider.stage}, self:custom.basePathMap.default}

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'test'}
  region: ${opt:region, 'us-east-1'}
  apiName: fantasy-football-${self:provider.stage}
  stackName: fantasy-football-${self:provider.stage}
  deploymentBucket:
    name: nevvi-serverless-deployment-bucket
  deploymentPrefix: ${self:provider.stage}
  environment:
    PLAYER_TABLE: ${self:custom.playerTableName}
    PLAYER_ACTION_QUEUE: ${self:custom.playerActionQueueUrl}
    MYSPORTSFEEDS_AUTHORIZATION_TOKEN: ${ssm:/nevvi/mysportsfeeds/authorization~true}
    MYSPORTSFEEDS_SEASON: 2020-2021-regular

functions:
  fantasyFootballAuthorizer:
    handler: src/functions/Authorizer.authorize
  refreshPlayers:
    timeout: 30
    handler: src/functions/dfs/DailyFantasyHandler.refreshPlayers
    events:
      - http:
          path: /dfs/v1/players/refresh
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: ${self:custom.playerTableArn}
  refreshGames:
    timeout: 30
    handler: src/functions/dfs/DailyFantasyHandler.refreshGames
    events:
      - http:
          path: /dfs/v1/games/refresh
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: ${self:custom.playerTableArn}
  refreshPlayerStats:
    timeout: 30
    handler: src/functions/dfs/DailyFantasyHandler.loadPlayerStats
    events:
      - http:
          path: /dfs/v1/players/week/{week}/refresh
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: ${self:custom.playerTableArn}
  getContests:
    handler: src/functions/dfs/DailyFantasyHandler.getContests
    events:
      - http:
          path: /dfs/v1/contests
          method: get
          authorizer:
            name: fantasyFootballAuthorizer
            resultTtlInSeconds: 0
            type: request
  optimizeContest:
    handler: src/functions/dfs/DailyFantasyHandler.optimize
    events:
      - http:
          path: /dfs/v1/contests/{contestId}/optimize
          method: post
          authorizer:
            name: fantasyFootballAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.playerTableArn}/index/GSI1
  getPlayer:
    handler: src/functions/dfs/DailyFantasyHandler.getPlayer
    events:
      - http:
          path: /dfs/v1/players/{playerId}
          method: get
          authorizer:
            name: fantasyFootballAuthorizer
            resultTtlInSeconds: 0
            type: request
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.playerTableArn}
  evaluatePlayers:
    timeout: 30
    handler: src/functions/dfs/DailyFantasyHandler.evaluatePlayers
    events:
      - http:
          path: /dfs/v1/players/week/{week}/evaluate
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: ${self:custom.playerTableArn}/index/GSI1
      - Effect: Allow
        Action:
          - sqs:SendMessage
          - sqs:SendMessageBatch
        Resource: ${self:custom.playerActionQueueArn}
  evaluatePlayer:
    handler: src/functions/dfs/DailyFantasyHandler.evaluatePlayer
    events:
      - sqs: ${self:custom.playerActionQueueArn}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: ${self:custom.playerTableArn}